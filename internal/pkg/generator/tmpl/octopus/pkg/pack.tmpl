package {{ .ARPkg }}

import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/mailru/activerecord/pkg/iproto/iproto"
	"github.com/mailru/activerecord/pkg/activerecord"
	"github.com/mailru/activerecord/pkg/octopus"
{{- range $ind, $imp := .Imports }}
	{{ if ne $imp.ImportName "" }}{{ $imp.ImportName }} {{ end }}"{{ $imp.Path }}"
{{- end }}
{{- range $i, $imp := addImport .FieldList }}
	"{{ $imp }}"
{{- end }}
)

{{ $pkgName := .ARPkg }}
{{ $serializers := .Serializers -}}
{{ $mutators := .Mutators -}}
{{ $PublicStructName := .ARPkgTitle -}}
{{ $LinkedObject := .LinkedObject }}
{{ $flags := .Flags }}
{{ $fields := .FieldList }}
{{ $procfields := .ProcOutFieldList }}
{{ $procInLen := len .ProcInFieldList }}
{{ $mutatorLen := len .Mutators }}

{{ range $ind, $fstruct := .FieldList -}}
	{{ $packerparam := packerParam $fstruct.Format -}}
	{{ $rtype := $fstruct.Format -}}
	{{ $sname := $fstruct.Serializer.Name -}}
	{{ if ne $sname "" -}}
		{{ $serializer := index $serializers $sname -}}
		{{ $rtype = $serializer.Type -}}
func Marshal{{ $fstruct.Name }}({{ $fstruct.Name }} {{ $rtype }}) (any, error) {
    {{ $serparams := $fstruct.Serializer.Params -}}
    {{ $bvar :=  $packerparam.PackConvFunc $fstruct.Name -}}
    pvar, err := {{ $serializer.ImportName }}.{{ $serializer.Marshaler }}({{ $serparams }}{{ $bvar }})
    if err != nil {
        return nil, fmt.Errorf("error marshal field {{ $fstruct.Name }}: %w", err)
    }

    return pvar, nil
}

	{{ end -}}
func pack{{ $fstruct.Name }}(w []byte, {{ $fstruct.Name }} {{ $rtype }}) ([]byte, error) {
	{{ $bvar :=  $packerparam.PackConvFunc $fstruct.Name -}}
	{{ if ne $sname "" -}}
		{{ $serializer := index $serializers $sname -}}
		{{ $serparams := $fstruct.Serializer.Params -}}
	pvar, err := {{ $serializer.ImportName }}.{{ $serializer.Marshaler }}({{ $serparams }}{{ $bvar }})
	if err != nil {
		return nil, fmt.Errorf("error marshal field {{ $fstruct.Name }}: %w", err)
	}
	{{- else -}}
	pvar := {{ $bvar }}
	{{- end }}

	return {{ $packerparam.PackFunc }}(w, pvar, iproto.ModeDefault), nil
}

func Unpack{{ $fstruct.Name }}(r *bytes.Reader) (ret {{ $rtype }}, errRet error) {
	var {{ $fstruct.Name }} {{ if ne $packerparam.UnpackType "" }}{{ $packerparam.UnpackType }}{{ else }}{{ $fstruct.Format }}{{ end }}
	{{ $isPointer := hasPrefix (printf "%s" $rtype) "*" }}

	err := {{ $packerparam.UnpackFunc }}(r, &{{ $fstruct.Name }}, iproto.ModeDefault)
	if err != nil {
		errRet = fmt.Errorf("error unpack field {{ $fstruct.Name }} in tuple: '%w'", err)
		return
	}

	bvar := {{ if ne $packerparam.UnpackConvFunc "" -}}
		{{ $packerparam.UnpackConvFunc }}({{ $fstruct.Name }})
	{{ else -}}
		{{ $fstruct.Name }}
	{{ end -}}

	{{ $underlyingType := trimPrefix (printf "%s" $rtype) "*"}}
	{{ if ne $sname "" -}}
		{{ $serializer := index $serializers $sname -}}
		{{ $serparams := $fstruct.Serializer.Params }}

	var svar = new({{ $underlyingType }})

	err = {{ $serializer.ImportName }}.{{ $serializer.Unmarshaler }}({{ $serparams }}bvar, svar)
	if err != nil {
		errRet = fmt.Errorf("error unmarshal field {{ $fstruct.Name }}: %w", err)
		return
	}

	return {{ if not $isPointer }}*{{ end }}svar, nil
	{{ else -}}

	return bvar, nil
	{{ end -}}

}
{{ end }}